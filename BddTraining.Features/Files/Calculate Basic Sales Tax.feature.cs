// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BddTraining.Features.Files
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Calculate Basic Sales Tax", Description="In order to comply with regulatory requirements\r\nAs a store owner\r\nI want to calc" +
        "ulate sales tax for products", SourceFile="Files\\Calculate Basic Sales Tax.feature", SourceLine=0)]
    public partial class CalculateBasicSalesTaxFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Calculate Basic Sales Tax.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Calculate Basic Sales Tax", "In order to comply with regulatory requirements\r\nAs a store owner\r\nI want to calc" +
                    "ulate sales tax for products", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void CalculateBasicSalesTax(string price, string type, string tax, string notes, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate Basic Sales Tax", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given(string.Format("There is a product with a price of ${0} and Its type is {1}", price, type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("I calculate sales tax for the product", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then(string.Format("The tax returned should be ${0}", tax), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate Basic Sales Tax, 100", SourceLine=11)]
        public virtual void CalculateBasicSalesTax_100()
        {
            this.CalculateBasicSalesTax("100", "Normal", "10", "charge 10% for normal products", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate Basic Sales Tax, 300", SourceLine=12)]
        public virtual void CalculateBasicSalesTax_300()
        {
            this.CalculateBasicSalesTax("300", "Books", "0", "books exempted", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate Basic Sales Tax, 600", SourceLine=13)]
        public virtual void CalculateBasicSalesTax_600()
        {
            this.CalculateBasicSalesTax("600", "Food", "0", "food exempte", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate Basic Sales Tax, 900", SourceLine=14)]
        public virtual void CalculateBasicSalesTax_900()
        {
            this.CalculateBasicSalesTax("900", "Medical", "0", "medical products exempted", ((string[])(null)));
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
